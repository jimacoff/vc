import {StoragePrefix} from './constants.js.erb';
import CookieStorage from 'js-cookie';

export const storageKey = (key) => `${StoragePrefix}::${key}`;

const StorageMock = {
  get: _.noop,
  set: _.noop,
  remove: _.noop,
  getExpr: _.noop,
  setExpr: _.noop,
  clearExpr: _.noop,
};

class Storage {
  constructor(storage) {
    this.storage = storage;
  }

  _get = key => {
    try {
      return JSON.parse(this.storage.getItem(key));
    } catch (err) {
      return null;
    }
  };
  get = key => this._get(storageKey(key));

  _remove = key => this.storage.removeItem(key);
  remove = key =>  this._remove(storageKey(key));

  _set = (key, value) => this.storage.setItem(key, JSON.stringify(value));
  set = (key, value) => this._set(storageKey(key), value);

  getExpr = key => {
    const got = this.get(key);
    if (got === null || got === undefined || got.value === undefined) {
      return null;
    }
    const {value, expr} = got;
    if (expr > Date.now()) {
      return value;
    } else {
      this.remove(key);
      return null;
    }
  };

  setExpr = (key, value, expr) => {
    try {
      this.set(key, {value, expr: Date.now() + (expr * 1000)});
      return true;
    } catch (e) {
      this.clearExpr();
      return false;
    }
  };

  clearExpr = () => {
    Object.keys(this.storage).forEach(key => {
      const got = this._get(key);
      if (got && got.expr) {
        this._remove(key);
      }
    });
  };
}

class VolatileStorage extends Storage {
  getExpr =  _.noop;
  setExpr =  _.noop;
  clearExpr =  _.noop;
}

<% if Rails.env.production? %>
  const StorageClass = Storage;
<% else %>
  const StorageClass = VolatileStorage;
<% end %>

const createStorageInstance = name => {
  try {
    const storage = window[name];
    return storage ? new StorageClass(storage) : StorageMock;
  } catch (err) {
    return StorageMock;
  }
};

const SessionStorage = createStorageInstance('sessionStorage');
const LocalStorage = createStorageInstance('localStorage');

export { SessionStorage, LocalStorage, CookieStorage };